//this program contains functions for the folowing operations on circular Doubly linked list:
//create
//Insert at a position
//delete from a position
//Display

#include <stdio.h>
#include <stdlib.h>

struct Node
{
    struct Node *prev;
    int data;
    struct Node *next;
} *Head = NULL,*last=NULL;

void create(int A[], int n)
{
    struct Node *t, *last;
    int i;

    Head = (struct Node *)malloc(sizeof(struct Node));
    Head->data = A[0];
    Head->prev = Head->next=Head;
    last = Head;

    for (i = 1; i < n; i++)
    {
        t = (struct Node *)malloc(sizeof(struct Node));
        t->data = A[i];
        t->next = last->next;
        t->prev = last;
        last->next = t;
        Head->prev=t;
        last = t;
    }
}



void insert(struct Node *p, int index, int n)
{
    struct Node *t;
    int i;
    if (index < 0 || index > Length(p))
        return;
    if (index == 0)
    {
        t = (struct Node *)malloc(sizeof(struct Node));
        t->data = n;
        if (Head == NULL)
        {
            Head = t;
            Head->next = Head;
            Head->prev = Head;
            last=Head;
        }
        else
        {
            t->next = Head;
            t->prev = Head->prev;
            Head->prev->next = t;
            Head->prev = t;
            Head = t;
        }
    }
    else
    {
        t = (struct Node *)malloc(sizeof(struct Node));
        t->data = n;
        for (i = 0; i < index - 1; i++)
        {
            p = p->next;
        }

        p->next->prev = t;
        t->next = p->next;
        p->next = t;
        t->prev = p;
    }
}


int Length(struct Node *p)
{
    int len=0;
    do
    {
        len++;
        p=p->next;
    } while (p!=Head);

    return len;
}

int Delete(struct Node *p, int index)
{
    struct Node *q;
    int i,x;
    if (index < 0 || index > Length(p))
        return -1;
    if (index == 1)
    {
        while(p->next!=Head)
        {
            p=p->next;
        }
        x=Head->data;
        if (Head == p)
        {
            free(Head);
            Head=NULL;
        }
        else
        {
            Head->next->prev=p;
            p->next=Head->next;
            Head=Head->next;
            
        }
    }
    else
    {
        
        for (i = 0; i < index - 2; i++)
        {
            p = p->next;
        }
        q=p->next;
        q->next->prev=q->prev;
        p->next=q->next;
        x=q->data;
        free(q);
    }
    return x;
}




void Display(struct Node *p)
{
    do
    {
        printf("%d<->", p->data);
        p = p->next;
    } while (p!=Head);
}




int main()
{
    int A[] = {10, 20, 30, 40, 50};

    create(A, 5);

    insert(Head, 4, 45);
    // insert(Head, 1, 45);
    // insert(Head, 2, 45);
    Display(Head);

    printf("Deleted element is %d\n",Delete(Head,5));
    Display(Head);

    return 0;
}